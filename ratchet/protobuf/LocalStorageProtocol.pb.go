// Code generated by protoc-gen-go.
// source: LocalStorageProtocol.proto
// DO NOT EDIT!

package axolotl

import proto "github.com/golang/protobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type SessionStructure struct {
	SessionVersion       *uint32                              `protobuf:"varint,1,opt,name=sessionVersion" json:"sessionVersion,omitempty"`
	LocalIdentityPublic  []byte                               `protobuf:"bytes,2,opt,name=localIdentityPublic" json:"localIdentityPublic,omitempty"`
	RemoteIdentityPublic []byte                               `protobuf:"bytes,3,opt,name=remoteIdentityPublic" json:"remoteIdentityPublic,omitempty"`
	RootKey              []byte                               `protobuf:"bytes,4,opt,name=rootKey" json:"rootKey,omitempty"`
	PreviousCounter      *uint32                              `protobuf:"varint,5,opt,name=previousCounter" json:"previousCounter,omitempty"`
	SenderChain          *SessionStructure_Chain              `protobuf:"bytes,6,opt,name=senderChain" json:"senderChain,omitempty"`
	ReceiverChains       []*SessionStructure_Chain            `protobuf:"bytes,7,rep,name=receiverChains" json:"receiverChains,omitempty"`
	PendingKeyExchange   *SessionStructure_PendingKeyExchange `protobuf:"bytes,8,opt,name=pendingKeyExchange" json:"pendingKeyExchange,omitempty"`
	PendingPreKey        *SessionStructure_PendingPreKey      `protobuf:"bytes,9,opt,name=pendingPreKey" json:"pendingPreKey,omitempty"`
	RemoteRegistrationId *uint32                              `protobuf:"varint,10,opt,name=remoteRegistrationId" json:"remoteRegistrationId,omitempty"`
	LocalRegistrationId  *uint32                              `protobuf:"varint,11,opt,name=localRegistrationId" json:"localRegistrationId,omitempty"`
	NeedsRefresh         *bool                                `protobuf:"varint,12,opt,name=needsRefresh" json:"needsRefresh,omitempty"`
	AliceBaseKey         []byte                               `protobuf:"bytes,13,opt,name=aliceBaseKey" json:"aliceBaseKey,omitempty"`
	XXX_unrecognized     []byte                               `json:"-"`
}

func (m *SessionStructure) Reset()         { *m = SessionStructure{} }
func (m *SessionStructure) String() string { return proto.CompactTextString(m) }
func (*SessionStructure) ProtoMessage()    {}

func (m *SessionStructure) GetSessionVersion() uint32 {
	if m != nil && m.SessionVersion != nil {
		return *m.SessionVersion
	}
	return 0
}

func (m *SessionStructure) GetLocalIdentityPublic() []byte {
	if m != nil {
		return m.LocalIdentityPublic
	}
	return nil
}

func (m *SessionStructure) GetRemoteIdentityPublic() []byte {
	if m != nil {
		return m.RemoteIdentityPublic
	}
	return nil
}

func (m *SessionStructure) GetRootKey() []byte {
	if m != nil {
		return m.RootKey
	}
	return nil
}

func (m *SessionStructure) GetPreviousCounter() uint32 {
	if m != nil && m.PreviousCounter != nil {
		return *m.PreviousCounter
	}
	return 0
}

func (m *SessionStructure) GetSenderChain() *SessionStructure_Chain {
	if m != nil {
		return m.SenderChain
	}
	return nil
}

func (m *SessionStructure) GetReceiverChains() []*SessionStructure_Chain {
	if m != nil {
		return m.ReceiverChains
	}
	return nil
}

func (m *SessionStructure) GetPendingKeyExchange() *SessionStructure_PendingKeyExchange {
	if m != nil {
		return m.PendingKeyExchange
	}
	return nil
}

func (m *SessionStructure) GetPendingPreKey() *SessionStructure_PendingPreKey {
	if m != nil {
		return m.PendingPreKey
	}
	return nil
}

func (m *SessionStructure) GetRemoteRegistrationId() uint32 {
	if m != nil && m.RemoteRegistrationId != nil {
		return *m.RemoteRegistrationId
	}
	return 0
}

func (m *SessionStructure) GetLocalRegistrationId() uint32 {
	if m != nil && m.LocalRegistrationId != nil {
		return *m.LocalRegistrationId
	}
	return 0
}

func (m *SessionStructure) GetNeedsRefresh() bool {
	if m != nil && m.NeedsRefresh != nil {
		return *m.NeedsRefresh
	}
	return false
}

func (m *SessionStructure) GetAliceBaseKey() []byte {
	if m != nil {
		return m.AliceBaseKey
	}
	return nil
}

type SessionStructure_Chain struct {
	SenderRatchetKey        []byte                               `protobuf:"bytes,1,opt,name=senderRatchetKey" json:"senderRatchetKey,omitempty"`
	SenderRatchetKeyPrivate []byte                               `protobuf:"bytes,2,opt,name=senderRatchetKeyPrivate" json:"senderRatchetKeyPrivate,omitempty"`
	ChainKey                *SessionStructure_Chain_ChainKey     `protobuf:"bytes,3,opt,name=chainKey" json:"chainKey,omitempty"`
	MessageKeys             []*SessionStructure_Chain_MessageKey `protobuf:"bytes,4,rep,name=messageKeys" json:"messageKeys,omitempty"`
	XXX_unrecognized        []byte                               `json:"-"`
}

func (m *SessionStructure_Chain) Reset()         { *m = SessionStructure_Chain{} }
func (m *SessionStructure_Chain) String() string { return proto.CompactTextString(m) }
func (*SessionStructure_Chain) ProtoMessage()    {}

func (m *SessionStructure_Chain) GetSenderRatchetKey() []byte {
	if m != nil {
		return m.SenderRatchetKey
	}
	return nil
}

func (m *SessionStructure_Chain) GetSenderRatchetKeyPrivate() []byte {
	if m != nil {
		return m.SenderRatchetKeyPrivate
	}
	return nil
}

func (m *SessionStructure_Chain) GetChainKey() *SessionStructure_Chain_ChainKey {
	if m != nil {
		return m.ChainKey
	}
	return nil
}

func (m *SessionStructure_Chain) GetMessageKeys() []*SessionStructure_Chain_MessageKey {
	if m != nil {
		return m.MessageKeys
	}
	return nil
}

type SessionStructure_Chain_ChainKey struct {
	Index            *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key              []byte  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SessionStructure_Chain_ChainKey) Reset()         { *m = SessionStructure_Chain_ChainKey{} }
func (m *SessionStructure_Chain_ChainKey) String() string { return proto.CompactTextString(m) }
func (*SessionStructure_Chain_ChainKey) ProtoMessage()    {}

func (m *SessionStructure_Chain_ChainKey) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *SessionStructure_Chain_ChainKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SessionStructure_Chain_MessageKey struct {
	Index            *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	CipherKey        []byte  `protobuf:"bytes,2,opt,name=cipherKey" json:"cipherKey,omitempty"`
	MacKey           []byte  `protobuf:"bytes,3,opt,name=macKey" json:"macKey,omitempty"`
	Iv               []byte  `protobuf:"bytes,4,opt,name=iv" json:"iv,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SessionStructure_Chain_MessageKey) Reset()         { *m = SessionStructure_Chain_MessageKey{} }
func (m *SessionStructure_Chain_MessageKey) String() string { return proto.CompactTextString(m) }
func (*SessionStructure_Chain_MessageKey) ProtoMessage()    {}

func (m *SessionStructure_Chain_MessageKey) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *SessionStructure_Chain_MessageKey) GetCipherKey() []byte {
	if m != nil {
		return m.CipherKey
	}
	return nil
}

func (m *SessionStructure_Chain_MessageKey) GetMacKey() []byte {
	if m != nil {
		return m.MacKey
	}
	return nil
}

func (m *SessionStructure_Chain_MessageKey) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

type SessionStructure_PendingKeyExchange struct {
	Sequence                *uint32 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	LocalBaseKey            []byte  `protobuf:"bytes,2,opt,name=localBaseKey" json:"localBaseKey,omitempty"`
	LocalBaseKeyPrivate     []byte  `protobuf:"bytes,3,opt,name=localBaseKeyPrivate" json:"localBaseKeyPrivate,omitempty"`
	LocalRatchetKey         []byte  `protobuf:"bytes,4,opt,name=localRatchetKey" json:"localRatchetKey,omitempty"`
	LocalRatchetKeyPrivate  []byte  `protobuf:"bytes,5,opt,name=localRatchetKeyPrivate" json:"localRatchetKeyPrivate,omitempty"`
	LocalIdentityKey        []byte  `protobuf:"bytes,7,opt,name=localIdentityKey" json:"localIdentityKey,omitempty"`
	LocalIdentityKeyPrivate []byte  `protobuf:"bytes,8,opt,name=localIdentityKeyPrivate" json:"localIdentityKeyPrivate,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *SessionStructure_PendingKeyExchange) Reset()         { *m = SessionStructure_PendingKeyExchange{} }
func (m *SessionStructure_PendingKeyExchange) String() string { return proto.CompactTextString(m) }
func (*SessionStructure_PendingKeyExchange) ProtoMessage()    {}

func (m *SessionStructure_PendingKeyExchange) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *SessionStructure_PendingKeyExchange) GetLocalBaseKey() []byte {
	if m != nil {
		return m.LocalBaseKey
	}
	return nil
}

func (m *SessionStructure_PendingKeyExchange) GetLocalBaseKeyPrivate() []byte {
	if m != nil {
		return m.LocalBaseKeyPrivate
	}
	return nil
}

func (m *SessionStructure_PendingKeyExchange) GetLocalRatchetKey() []byte {
	if m != nil {
		return m.LocalRatchetKey
	}
	return nil
}

func (m *SessionStructure_PendingKeyExchange) GetLocalRatchetKeyPrivate() []byte {
	if m != nil {
		return m.LocalRatchetKeyPrivate
	}
	return nil
}

func (m *SessionStructure_PendingKeyExchange) GetLocalIdentityKey() []byte {
	if m != nil {
		return m.LocalIdentityKey
	}
	return nil
}

func (m *SessionStructure_PendingKeyExchange) GetLocalIdentityKeyPrivate() []byte {
	if m != nil {
		return m.LocalIdentityKeyPrivate
	}
	return nil
}

type SessionStructure_PendingPreKey struct {
	PreKeyId         *uint32 `protobuf:"varint,1,opt,name=preKeyId" json:"preKeyId,omitempty"`
	SignedPreKeyId   *int32  `protobuf:"varint,3,opt,name=signedPreKeyId" json:"signedPreKeyId,omitempty"`
	BaseKey          []byte  `protobuf:"bytes,2,opt,name=baseKey" json:"baseKey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SessionStructure_PendingPreKey) Reset()         { *m = SessionStructure_PendingPreKey{} }
func (m *SessionStructure_PendingPreKey) String() string { return proto.CompactTextString(m) }
func (*SessionStructure_PendingPreKey) ProtoMessage()    {}

func (m *SessionStructure_PendingPreKey) GetPreKeyId() uint32 {
	if m != nil && m.PreKeyId != nil {
		return *m.PreKeyId
	}
	return 0
}

func (m *SessionStructure_PendingPreKey) GetSignedPreKeyId() int32 {
	if m != nil && m.SignedPreKeyId != nil {
		return *m.SignedPreKeyId
	}
	return 0
}

func (m *SessionStructure_PendingPreKey) GetBaseKey() []byte {
	if m != nil {
		return m.BaseKey
	}
	return nil
}

type RecordStructure struct {
	CurrentSession   *SessionStructure   `protobuf:"bytes,1,opt,name=currentSession" json:"currentSession,omitempty"`
	PreviousSessions []*SessionStructure `protobuf:"bytes,2,rep,name=previousSessions" json:"previousSessions,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *RecordStructure) Reset()         { *m = RecordStructure{} }
func (m *RecordStructure) String() string { return proto.CompactTextString(m) }
func (*RecordStructure) ProtoMessage()    {}

func (m *RecordStructure) GetCurrentSession() *SessionStructure {
	if m != nil {
		return m.CurrentSession
	}
	return nil
}

func (m *RecordStructure) GetPreviousSessions() []*SessionStructure {
	if m != nil {
		return m.PreviousSessions
	}
	return nil
}

type PreKeyRecordStructure struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,2,opt,name=publicKey" json:"publicKey,omitempty"`
	PrivateKey       []byte  `protobuf:"bytes,3,opt,name=privateKey" json:"privateKey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PreKeyRecordStructure) Reset()         { *m = PreKeyRecordStructure{} }
func (m *PreKeyRecordStructure) String() string { return proto.CompactTextString(m) }
func (*PreKeyRecordStructure) ProtoMessage()    {}

func (m *PreKeyRecordStructure) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PreKeyRecordStructure) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PreKeyRecordStructure) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

type SignedPreKeyRecordStructure struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,2,opt,name=publicKey" json:"publicKey,omitempty"`
	PrivateKey       []byte  `protobuf:"bytes,3,opt,name=privateKey" json:"privateKey,omitempty"`
	Signature        []byte  `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	Timestamp        *uint64 `protobuf:"fixed64,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignedPreKeyRecordStructure) Reset()         { *m = SignedPreKeyRecordStructure{} }
func (m *SignedPreKeyRecordStructure) String() string { return proto.CompactTextString(m) }
func (*SignedPreKeyRecordStructure) ProtoMessage()    {}

func (m *SignedPreKeyRecordStructure) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SignedPreKeyRecordStructure) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedPreKeyRecordStructure) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SignedPreKeyRecordStructure) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedPreKeyRecordStructure) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type IdentityKeyPairStructure struct {
	PublicKey        []byte `protobuf:"bytes,1,opt,name=publicKey" json:"publicKey,omitempty"`
	PrivateKey       []byte `protobuf:"bytes,2,opt,name=privateKey" json:"privateKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IdentityKeyPairStructure) Reset()         { *m = IdentityKeyPairStructure{} }
func (m *IdentityKeyPairStructure) String() string { return proto.CompactTextString(m) }
func (*IdentityKeyPairStructure) ProtoMessage()    {}

func (m *IdentityKeyPairStructure) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *IdentityKeyPairStructure) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

type SenderKeyStateStructure struct {
	SenderKeyId       *uint32                                     `protobuf:"varint,1,opt,name=senderKeyId" json:"senderKeyId,omitempty"`
	SenderChainKey    *SenderKeyStateStructure_SenderChainKey     `protobuf:"bytes,2,opt,name=senderChainKey" json:"senderChainKey,omitempty"`
	SenderSigningKey  *SenderKeyStateStructure_SenderSigningKey   `protobuf:"bytes,3,opt,name=senderSigningKey" json:"senderSigningKey,omitempty"`
	SenderMessageKeys []*SenderKeyStateStructure_SenderMessageKey `protobuf:"bytes,4,rep,name=senderMessageKeys" json:"senderMessageKeys,omitempty"`
	XXX_unrecognized  []byte                                      `json:"-"`
}

func (m *SenderKeyStateStructure) Reset()         { *m = SenderKeyStateStructure{} }
func (m *SenderKeyStateStructure) String() string { return proto.CompactTextString(m) }
func (*SenderKeyStateStructure) ProtoMessage()    {}

func (m *SenderKeyStateStructure) GetSenderKeyId() uint32 {
	if m != nil && m.SenderKeyId != nil {
		return *m.SenderKeyId
	}
	return 0
}

func (m *SenderKeyStateStructure) GetSenderChainKey() *SenderKeyStateStructure_SenderChainKey {
	if m != nil {
		return m.SenderChainKey
	}
	return nil
}

func (m *SenderKeyStateStructure) GetSenderSigningKey() *SenderKeyStateStructure_SenderSigningKey {
	if m != nil {
		return m.SenderSigningKey
	}
	return nil
}

func (m *SenderKeyStateStructure) GetSenderMessageKeys() []*SenderKeyStateStructure_SenderMessageKey {
	if m != nil {
		return m.SenderMessageKeys
	}
	return nil
}

type SenderKeyStateStructure_SenderChainKey struct {
	Iteration        *uint32 `protobuf:"varint,1,opt,name=iteration" json:"iteration,omitempty"`
	Seed             []byte  `protobuf:"bytes,2,opt,name=seed" json:"seed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SenderKeyStateStructure_SenderChainKey) Reset() {
	*m = SenderKeyStateStructure_SenderChainKey{}
}
func (m *SenderKeyStateStructure_SenderChainKey) String() string { return proto.CompactTextString(m) }
func (*SenderKeyStateStructure_SenderChainKey) ProtoMessage()    {}

func (m *SenderKeyStateStructure_SenderChainKey) GetIteration() uint32 {
	if m != nil && m.Iteration != nil {
		return *m.Iteration
	}
	return 0
}

func (m *SenderKeyStateStructure_SenderChainKey) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

type SenderKeyStateStructure_SenderMessageKey struct {
	Iteration        *uint32 `protobuf:"varint,1,opt,name=iteration" json:"iteration,omitempty"`
	Seed             []byte  `protobuf:"bytes,2,opt,name=seed" json:"seed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SenderKeyStateStructure_SenderMessageKey) Reset() {
	*m = SenderKeyStateStructure_SenderMessageKey{}
}
func (m *SenderKeyStateStructure_SenderMessageKey) String() string { return proto.CompactTextString(m) }
func (*SenderKeyStateStructure_SenderMessageKey) ProtoMessage()    {}

func (m *SenderKeyStateStructure_SenderMessageKey) GetIteration() uint32 {
	if m != nil && m.Iteration != nil {
		return *m.Iteration
	}
	return 0
}

func (m *SenderKeyStateStructure_SenderMessageKey) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

type SenderKeyStateStructure_SenderSigningKey struct {
	Public           []byte `protobuf:"bytes,1,opt,name=public" json:"public,omitempty"`
	Private          []byte `protobuf:"bytes,2,opt,name=private" json:"private,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SenderKeyStateStructure_SenderSigningKey) Reset() {
	*m = SenderKeyStateStructure_SenderSigningKey{}
}
func (m *SenderKeyStateStructure_SenderSigningKey) String() string { return proto.CompactTextString(m) }
func (*SenderKeyStateStructure_SenderSigningKey) ProtoMessage()    {}

func (m *SenderKeyStateStructure_SenderSigningKey) GetPublic() []byte {
	if m != nil {
		return m.Public
	}
	return nil
}

func (m *SenderKeyStateStructure_SenderSigningKey) GetPrivate() []byte {
	if m != nil {
		return m.Private
	}
	return nil
}

type SenderKeyRecordStructure struct {
	SenderKeyStates  []*SenderKeyStateStructure `protobuf:"bytes,1,rep,name=senderKeyStates" json:"senderKeyStates,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *SenderKeyRecordStructure) Reset()         { *m = SenderKeyRecordStructure{} }
func (m *SenderKeyRecordStructure) String() string { return proto.CompactTextString(m) }
func (*SenderKeyRecordStructure) ProtoMessage()    {}

func (m *SenderKeyRecordStructure) GetSenderKeyStates() []*SenderKeyStateStructure {
	if m != nil {
		return m.SenderKeyStates
	}
	return nil
}

func init() {
}
