// Code generated by protoc-gen-go.
// source: WhisperTextProtocol.proto
// DO NOT EDIT!

package axolotl

import proto "github.com/golang/protobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type WhisperMessage struct {
	RatchetKey       []byte  `protobuf:"bytes,1,opt,name=ratchetKey" json:"ratchetKey,omitempty"`
	Counter          *uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	PreviousCounter  *uint32 `protobuf:"varint,3,opt,name=previousCounter" json:"previousCounter,omitempty"`
	Ciphertext       []byte  `protobuf:"bytes,4,opt,name=ciphertext" json:"ciphertext,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WhisperMessage) Reset()         { *m = WhisperMessage{} }
func (m *WhisperMessage) String() string { return proto.CompactTextString(m) }
func (*WhisperMessage) ProtoMessage()    {}

func (m *WhisperMessage) GetRatchetKey() []byte {
	if m != nil {
		return m.RatchetKey
	}
	return nil
}

func (m *WhisperMessage) GetCounter() uint32 {
	if m != nil && m.Counter != nil {
		return *m.Counter
	}
	return 0
}

func (m *WhisperMessage) GetPreviousCounter() uint32 {
	if m != nil && m.PreviousCounter != nil {
		return *m.PreviousCounter
	}
	return 0
}

func (m *WhisperMessage) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type PreKeyWhisperMessage struct {
	RegistrationId   *uint32 `protobuf:"varint,5,opt,name=registrationId" json:"registrationId,omitempty"`
	PreKeyId         *uint32 `protobuf:"varint,1,opt,name=preKeyId" json:"preKeyId,omitempty"`
	SignedPreKeyId   *uint32 `protobuf:"varint,6,opt,name=signedPreKeyId" json:"signedPreKeyId,omitempty"`
	BaseKey          []byte  `protobuf:"bytes,2,opt,name=baseKey" json:"baseKey,omitempty"`
	IdentityKey      []byte  `protobuf:"bytes,3,opt,name=identityKey" json:"identityKey,omitempty"`
	Message          []byte  `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PreKeyWhisperMessage) Reset()         { *m = PreKeyWhisperMessage{} }
func (m *PreKeyWhisperMessage) String() string { return proto.CompactTextString(m) }
func (*PreKeyWhisperMessage) ProtoMessage()    {}

func (m *PreKeyWhisperMessage) GetRegistrationId() uint32 {
	if m != nil && m.RegistrationId != nil {
		return *m.RegistrationId
	}
	return 0
}

func (m *PreKeyWhisperMessage) GetPreKeyId() uint32 {
	if m != nil && m.PreKeyId != nil {
		return *m.PreKeyId
	}
	return 0
}

func (m *PreKeyWhisperMessage) GetSignedPreKeyId() uint32 {
	if m != nil && m.SignedPreKeyId != nil {
		return *m.SignedPreKeyId
	}
	return 0
}

func (m *PreKeyWhisperMessage) GetBaseKey() []byte {
	if m != nil {
		return m.BaseKey
	}
	return nil
}

func (m *PreKeyWhisperMessage) GetIdentityKey() []byte {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

func (m *PreKeyWhisperMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type KeyExchangeMessage struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BaseKey          []byte  `protobuf:"bytes,2,opt,name=baseKey" json:"baseKey,omitempty"`
	RatchetKey       []byte  `protobuf:"bytes,3,opt,name=ratchetKey" json:"ratchetKey,omitempty"`
	IdentityKey      []byte  `protobuf:"bytes,4,opt,name=identityKey" json:"identityKey,omitempty"`
	BaseKeySignature []byte  `protobuf:"bytes,5,opt,name=baseKeySignature" json:"baseKeySignature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyExchangeMessage) Reset()         { *m = KeyExchangeMessage{} }
func (m *KeyExchangeMessage) String() string { return proto.CompactTextString(m) }
func (*KeyExchangeMessage) ProtoMessage()    {}

func (m *KeyExchangeMessage) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *KeyExchangeMessage) GetBaseKey() []byte {
	if m != nil {
		return m.BaseKey
	}
	return nil
}

func (m *KeyExchangeMessage) GetRatchetKey() []byte {
	if m != nil {
		return m.RatchetKey
	}
	return nil
}

func (m *KeyExchangeMessage) GetIdentityKey() []byte {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

func (m *KeyExchangeMessage) GetBaseKeySignature() []byte {
	if m != nil {
		return m.BaseKeySignature
	}
	return nil
}

type SenderKeyMessage struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Iteration        *uint32 `protobuf:"varint,2,opt,name=iteration" json:"iteration,omitempty"`
	Ciphertext       []byte  `protobuf:"bytes,3,opt,name=ciphertext" json:"ciphertext,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SenderKeyMessage) Reset()         { *m = SenderKeyMessage{} }
func (m *SenderKeyMessage) String() string { return proto.CompactTextString(m) }
func (*SenderKeyMessage) ProtoMessage()    {}

func (m *SenderKeyMessage) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SenderKeyMessage) GetIteration() uint32 {
	if m != nil && m.Iteration != nil {
		return *m.Iteration
	}
	return 0
}

func (m *SenderKeyMessage) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type SenderKeyDistributionMessage struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Iteration        *uint32 `protobuf:"varint,2,opt,name=iteration" json:"iteration,omitempty"`
	ChainKey         []byte  `protobuf:"bytes,3,opt,name=chainKey" json:"chainKey,omitempty"`
	SigningKey       []byte  `protobuf:"bytes,4,opt,name=signingKey" json:"signingKey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SenderKeyDistributionMessage) Reset()         { *m = SenderKeyDistributionMessage{} }
func (m *SenderKeyDistributionMessage) String() string { return proto.CompactTextString(m) }
func (*SenderKeyDistributionMessage) ProtoMessage()    {}

func (m *SenderKeyDistributionMessage) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SenderKeyDistributionMessage) GetIteration() uint32 {
	if m != nil && m.Iteration != nil {
		return *m.Iteration
	}
	return 0
}

func (m *SenderKeyDistributionMessage) GetChainKey() []byte {
	if m != nil {
		return m.ChainKey
	}
	return nil
}

func (m *SenderKeyDistributionMessage) GetSigningKey() []byte {
	if m != nil {
		return m.SigningKey
	}
	return nil
}

func init() {
}
